plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-4"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: "build-time-tracker"
apply plugin: 'io.fabric'
//apply plugin: 'com.getkeepsafe.dexcount'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply from: '../config/quality/ktlint.gradle'
apply from: '../config/quality/jacoco.gradle'
apply from: '../config/versions.gradle'

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "com.elegion.android.bankex"
        minSdkVersion 21
        targetSdkVersion 27

        versionCode rootProject.versionCode
        versionName rootProject.versionName

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        buildConfigField 'String', 'API_BASE_URL', '"https://api.github.com/"'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "2048M"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    kotlin {
        experimental {
            coroutines "enable"
        }
    }

    signingConfigs {
        debug {
            storeFile file('debug.jks')
        }
        release {
            storeFile file(String.valueOf(System.getenv("KEYSTORE")))
            storePassword System.getenv("STOREPASS")
            keyAlias System.getenv("KEYALIAS")
            keyPassword System.getenv("KEYPASS")
        }
        playstore {
            storeFile file(String.valueOf(System.getenv("RELEASE_KEYSTORE")))
            storePassword System.getenv("RELEASE_STOREPASS")
            keyAlias System.getenv("RELEASE_KEYALIAS")
            keyPassword System.getenv("RELEASE_KEYPASS")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            // have to keep them here because of lazy programmers who do not want to add environment variables
            ext.fabricApiKey = "aba301d58d2ab586a56e281861dd14141b362b34"
            ext.fabricApiSecret = "a896e777cae983a61bc57b2024bec131e975dce43eebc223bbc343b8f0f46a64"
        }

        releaseQa {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix rootProject.qaVersionSuffix
            ext.betaDistributionReleaseNotes = System.getenv("CHANGELOG")
            ext.fabricApiKey = System.getenv("RELEASE_QA_FABRIC_API_KEY")
            ext.fabricApiSecret = System.getenv("RELEASE_QA_FABRIC_API_SECRET")
        }

        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.betaDistributionReleaseNotes = System.getenv("CHANGELOG")
            ext.fabricApiKey = "aba301d58d2ab586a56e281861dd14141b362b34"
            ext.fabricApiSecret = "a896e777cae983a61bc57b2024bec131e975dce43eebc223bbc343b8f0f46a64"
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    testOptions {
        unitTests.all { jvmArgs '-noverify' }
    }

    // Generate different fabric.properties files for different build variants
    File crashlyticsProperties = new File("${project.projectDir.absolutePath}/fabric.properties")
    applicationVariants.all { variant ->
        def variantSuffix = variant.name.capitalize()
        def generatePropertiesTask = task("fabricGenerateProperties${variantSuffix}") << {
            Properties properties = new Properties()
            properties.put("apiKey", variant.buildType.ext.fabricApiKey)
            properties.put("apiSecret", variant.buildType.ext.fabricApiSecret)
            properties.store(new FileWriter(crashlyticsProperties), "")
        }

        def generateResourcesTask = project.tasks.getByName("fabricGenerateResources${variantSuffix}")
        generateResourcesTask.dependsOn generatePropertiesTask
    }
}
project.ext {
    retrofitVersion = "2.3.0"
    okhttpVersion = "3.9.0"
    supportVersion = "27.1.0"
    web3jVersion = "3.3.1-android"
    gethVersion = "1.7.0"
    gsonVersion = "2.8.2"
    rxJavaVersion = "2.1.6"
    rxAndroidVersion = "2.0.1"
    daggerVersion = "2.11"
}

dependencies {
    // Etherium client
    implementation "org.web3j:core:$project.web3jVersion"
    implementation "org.ethereum:geth:$project.gethVersion"

    implementation 'com.android.support:multidex:1.0.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlin_coroutine_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:$kotlin_coroutine_version"

    implementation "com.android.support:support-v13:$supportVersion"
    implementation "com.android.support:customtabs:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"

    implementation 'com.android.support.constraint:constraint-layout:1.1.1'

    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"

    //    Okhttp
    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    implementation "com.jakewharton.timber:timber:$timberVersion"

    //    Moxy
    implementation 'com.arello-mobile:moxy:1.5.3'
    implementation 'com.android.support:support-v4:27.1.1'
    kapt 'com.arello-mobile:moxy-compiler:1.5.3'
    implementation 'com.arello-mobile:moxy-app-compat:1.5.3'

    //    Pager
    implementation 'com.romandanylyk:pageindicatorview:1.0.1'

    //    Room
    implementation "android.arch.persistence.room:runtime:1.0.0"
    annotationProcessor "android.arch.persistence.room:compiler:1.0.0"

    //    Add Zxing library to generate barcode
    implementation 'com.google.zxing:core:3.3.0'
    implementation 'com.journeyapps:zxing-android-embedded:3.6.0@aar'

    implementation("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
        transitive = true
    }
    implementation project(":tn")
    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoViersion"
}

detekt {
    version = "1.0.0.RC6-4"
    profile("main") {
        input = "$projectDir"
        config = "$project.rootDir/config/quality/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt"
        // Directory where output reports are stored (if present)
    }
}

buildtimetracker {
    reporters {
        csv {
            output "build/times.csv"
            append true
            header false
        }

        summary {
            ordered true
            threshold 50
            barstyle "none"
        }

        csvSummary {
            csv "build/times.csv"
        }
    }
}
