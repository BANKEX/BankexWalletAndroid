apply plugin: 'com.android.application'
apply plugin: 'io.fabric'
apply plugin: 'realm-android'
apply plugin: 'com.google.gms.google-services'

apply from: '../dependencies.gradle'

repositories {
  maven { url 'https://maven.fabric.io/public' }
}

android {
  compileSdkVersion compileSdk
  buildToolsVersion buildTools

  signingConfigs {
    debug {
      storeFile file('keystore/debug.jks')
      keyAlias 'androiddebugkey'
      keyPassword 'android'
      storePassword 'android'
    }
  }

  dexOptions {
    javaMaxHeapSize "2g"
  }

  realm {
    syncEnabled = true
  }

  lintOptions {
    checkReleaseBuilds false
    abortOnError false
  }

  defaultConfig {
    applicationId "com.bankex.pay"
    minSdkVersion minSdk
    targetSdkVersion targetSdk

    versionCode System.getenv("BUILD_NUMBER") as Integer ?: 0
    versionName computeVersionName(versionCode)

    multiDexEnabled true
    testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"

    javaCompileOptions {
      annotationProcessorOptions {
        includeCompileClasspath true
      }
    }
  }

  buildTypes {
    release {
      minifyEnabled false
      debuggable false
      zipAlignEnabled true

      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
      buildConfigField "boolean", "AUTHORIZATION_ENABLED", "false"
      ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
    }

    debug {
      applicationIdSuffix ".dev"
      minifyEnabled false
      debuggable true
      signingConfig signingConfigs.debug

      proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
      buildConfigField "boolean", "AUTHORIZATION_ENABLED", "true"
      ext.betaDistributionReleaseNotesFilePath = 'release_notes.txt'
    }
  }

  compileOptions {
    sourceCompatibility JavaVersion.VERSION_1_8
    targetCompatibility JavaVersion.VERSION_1_8
  }

  productFlavors {
  }

  defaultConfig {
    // Other values set here
    manifestPlaceholders = [fabric_io_id: "5b2cfd1743e96d92261c59fb94482a93c8ec4e13"]
  }
}

def computeVersionName(int versionCode) {
  if (hotfix > 0) {
    return String.format('%d.%d.%d', major, minor, hotfix)
  } else {
    return String.format('%d.%d', major, minor)
  }
}

dependencies {
  implementation fileTree(include: ['*.jar'], dir: 'libs')
  implementation project(':tn')

  implementation androidSupport.appcompatV7
  implementation androidSupport.design
  implementation androidSupport.constraintLayout
  implementation androidSupport.preference

  implementation libs.firebase
  implementation libs.firebaseDynamicLink
  implementation libs.firebaseCloudMessaging
  implementation libs.firebaseAppIndexing
  implementation libs.dagger
  annotationProcessor libs.daggerCompiler
  annotationProcessor libs.daggerProcessor
  implementation libs.moxy
  implementation libs.moxyAppCompat
  annotationProcessor libs.moxyCompiler
  implementation libs.rxJava2
  implementation libs.rxAndroid2
  implementation libs.retrofit
  implementation libs.retrofitConverter
  implementation libs.retrofitRxAdapter
  implementation libs.okHttpInterceptor
  implementation libs.appintro
  implementation libs.adapterDelegates
  implementation libs.guava
  implementation libs.fingetprint
  implementation libs.qr
  implementation libs.qrGenerator
  implementation libs.butterKnife
  annotationProcessor libs.butterKnifeProcessor
  implementation libs.web3j
  implementation libs.ethereum
  implementation libs.bip32
  implementation libs.bip39
  implementation libs.bip44
  implementation libs.fragmentArgs
  annotationProcessor libs.fragmentArgsProcessor
  implementation(libs.fabric) {
    transitive = true
  }

  testImplementation testingLibraries.junit
  testImplementation testingLibraries.mockito
  testImplementation testingLibraries.robolectric
  testImplementation testingLibraries.hamcrest
  androidTestImplementation(testingLibraries.mockito) { exclude group: 'net.bytebuddy' }
  androidTestImplementation testingLibraries.espresso
  androidTestImplementation testingLibraries.testRunner
}
