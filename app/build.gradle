plugins {
    id "io.gitlab.arturbosch.detekt" version "1.0.0.RC6-4"
}

apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'
apply plugin: 'io.fabric'

repositories {
    maven { url 'https://maven.fabric.io/public' }
}

apply from: '../config/quality/ktlint.gradle'
apply from: '../config/versions.gradle'

android {
    compileSdkVersion 27

    defaultConfig {
        applicationId "com.elegion.android.template"
        minSdkVersion 16
        targetSdkVersion 27

        versionCode rootProject.versionCode
        versionName rootProject.versionName

        vectorDrawables.useSupportLibrary = true
        multiDexEnabled true

        buildConfigField 'String', 'API_BASE_URL', '"https://api.github.com/"'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    dexOptions {
        preDexLibraries true
        javaMaxHeapSize "2048M"
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
        test.java.srcDirs += 'src/test/kotlin'
    }

    signingConfigs {
        debug {
            storeFile file('debug.jks')
        }
        release {
            storeFile file(String.valueOf(System.getenv("KEYSTORE")))
            storePassword System.getenv("STOREPASS")
            keyAlias System.getenv("KEYALIAS")
            keyPassword System.getenv("KEYPASS")
        }
        playstore {
            storeFile file(String.valueOf(System.getenv("RELEASE_KEYSTORE")))
            storePassword System.getenv("RELEASE_STOREPASS")
            keyAlias System.getenv("RELEASE_KEYALIAS")
            keyPassword System.getenv("RELEASE_KEYPASS")
        }
    }

    buildTypes {
        debug {
            signingConfig signingConfigs.debug
            ext.fabricApiKey = System.getenv("RELEASE_QA_FABRIC_API_KEY")
            ext.fabricApiSecret = System.getenv("RELEASE_QA_FABRIC_API_SECRET")
        }

        releaseQa {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            versionNameSuffix rootProject.qaVersionSuffix
            ext.betaDistributionReleaseNotes = System.getenv("CHANGELOG")
            ext.fabricApiKey = System.getenv("RELEASE_QA_FABRIC_API_KEY")
            ext.fabricApiSecret = System.getenv("RELEASE_QA_FABRIC_API_SECRET")
        }

        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            ext.fabricApiKey = System.getenv("RELEASE_FABRIC_API_KEY")
            ext.fabricApiSecret = System.getenv("RELEASE_FABRIC_API_SECRET")
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/rxjava.properties'
    }

    lintOptions {
        disable 'InvalidPackage'
    }

    testOptions {
        unitTests.all { jvmArgs '-noverify' }
    }

    // Generate different fabric.properties files for different build variants
    File crashlyticsProperties = new File("${project.projectDir.absolutePath}/fabric.properties")
    applicationVariants.all { variant ->
        def variantSuffix = variant.name.capitalize()
        def generatePropertiesTask = task("fabricGenerateProperties${variantSuffix}") << {
            Properties properties = new Properties()
            properties.put("apiKey", variant.buildType.ext.fabricApiKey)
            properties.put("apiSecret", variant.buildType.ext.fabricApiSecret)
            properties.store(new FileWriter(crashlyticsProperties), "")
        }

        def generateResourcesTask = project.tasks.getByName("fabricGenerateResources${variantSuffix}")
        generateResourcesTask.dependsOn generatePropertiesTask
    }
}

dependencies {
    implementation 'com.android.support:multidex:1.0.3'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"

    implementation "com.android.support:support-v4:$supportVersion"
    implementation "com.android.support:support-v13:$supportVersion"
    implementation "com.android.support:customtabs:$supportVersion"
    implementation "com.android.support:appcompat-v7:$supportVersion"
    implementation "com.android.support:recyclerview-v7:$supportVersion"
    implementation "com.android.support:design:$supportVersion"

    implementation "io.reactivex.rxjava2:rxandroid:$rxandroidVersion"
    implementation "io.reactivex.rxjava2:rxjava:$rxjavaVersion"

    implementation "com.squareup.okhttp3:okhttp:$okhttpVersion"
    implementation "com.squareup.okhttp3:logging-interceptor:$okhttpInterceptorVersion"
    implementation "com.squareup.retrofit2:retrofit:$retrofitVersion"
    implementation "com.squareup.retrofit2:converter-gson:$retrofitVersion"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofitVersion"

    implementation "com.jakewharton.timber:timber:$timberVersion"

    implementation 'com.arello-mobile:moxy:1.5.3'
    kapt 'com.arello-mobile:moxy-compiler:1.5.3'
    implementation 'com.arello-mobile:moxy-app-compat:1.5.3'

    compile("com.crashlytics.sdk.android:crashlytics:$crashlyticsVersion") {
        transitive = true
    }

    testImplementation "junit:junit:$junitVersion"
    testImplementation "org.mockito:mockito-core:$mockitoViersion"
}

detekt {
    version = "1.0.0.RC6-4"
    profile("main") {
        input = "$projectDir"
        config = "$project.rootDir/config/quality/detekt.yml"
        filters = ".*test.*,.*/resources/.*,.*/tmp/.*"
        output = "$projectDir/build/reports/detekt" // Directory where output reports are stored (if present)
    }
}
